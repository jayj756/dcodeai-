"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoWriter = void 0;
const fs_1 = __importDefault(require("fs"));
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const types_1 = require("./types");
const mkdirp = require('mkdirp');
class AutoWriter {
    constructor(tableText, options) {
        this.tableText = tableText;
        this.options = options;
    }
    write() {
        if (this.options.noWrite) {
            return Promise.resolve();
        }
        mkdirp.sync(path_1.default.resolve(this.options.directory));
        const tables = lodash_1.default.keys(this.tableText);
        const promises = tables.map(t => {
            return this.createFile(t);
        });
        return Promise.all(promises);
        // Write out some Typescript d.ts files
        // if (this.options.typescript) {
        //   if (typescriptFiles !== null && typescriptFiles.length > 1) {
        //     fs.writeFileSync(path.join(self.options.directory, 'db.d.ts'), typescriptFiles[0], 'utf8');
        //     fs.writeFileSync(path.join(self.options.directory, 'db.tables.ts'), typescriptFiles[1], 'utf8');
        //   }
        // }
    }
    createFile(table) {
        // FIXME: schema is not used to write the file name and there could be collisions. For now it
        // is up to the developer to pick the right schema, and potentially chose different output
        // folders for each different schema.
        const [schemaName, tableName] = types_1.qNameSplit(table);
        const fileName = types_1.recase(this.options.caseFile, tableName);
        const filePath = path_1.default.join(this.options.directory, fileName + (this.options.typescript ? '.ts' : '.js'));
        const writeFile = util_1.default.promisify(fs_1.default.writeFile);
        return writeFile(path_1.default.resolve(filePath), this.tableText[table]);
    }
}
exports.AutoWriter = AutoWriter;
//# sourceMappingURL=auto-writer.js.map